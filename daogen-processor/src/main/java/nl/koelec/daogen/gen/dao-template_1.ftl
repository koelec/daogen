package ${types[0].packageName};

import nl.koelec.daogen.core.AbstractDao;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.annotation.Generated;

@Generated(value="Generated by ${generator}", date = "${currentTime}")
public class ${types[0].implClassName} extends AbstractDao implements ${types[0].ifcClassName} {

    private final EntityManager entityManager;

    public ${types[0].implClassName}(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    @Override
    protected EntityManager getEntitymanager() {
        return entityManager;
    }

<#list types[0].methods as method>
    @Override
    public ${method.returnType} ${method.name}(
<#list method.params as param>
${param.type} ${param.name}
<#if param.last == false>,</#if>
</#list>
) {
<#if method.queryString??>
<#if method.namedQuery>
Query query = getEntitymanager().createNamedQuery("${types[0].baseName}.${method.name}");
<#else>
Query query = getEntitymanager().createQuery("${method.queryString}");
</#if>
<#list method.params as param>
        setParam("${param.name}", ${param.name}, ${param.temporalType!"null"}, query);
</#list>
<#list method.hints as hint>
    query.setHint("${hint.name}", "${hint.value}");
</#list>
<#if method.collectionReturnType>
    return query.getResultList();
<#else>
<#if method.throwException>
    try {
        return (${method.returnType})query.getSingleResult();    
    } catch(javax.persistence.NoResultException nre) {
        StringBuilder builder = new StringBuilder("params: ");
<#list method.params as param>
        builder.append("${param.name} = [");
        builder.append(${param.name});
        builder.append("]");<#if param.last == false>builder.append(",");</#if>
</#list>
        throw new RuntimeException(builder.toString(), nre);
    }
<#else>
    try {
        return (${method.returnType})query.getSingleResult();    
    } catch(javax.persistence.NoResultException nre) {
        return null;
    }
</#if>
</#if>
<#else>
    // override this method in a subclass to provide proper implementation
    throw new UnsupportedOperationException();
</#if>
}
</#list>
}
